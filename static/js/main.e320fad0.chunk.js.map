{"version":3,"sources":["components/Navbar.js","utils/capitlizeFLetter.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","Props","React","createElement","className","concat","mode","data-bs-theme","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","hometext","abouttext","onClick","toggleMode","role","htmlFor","colorArr","map","color","onChange","changeColor","name","value","label","defaultProps","utils","capitlizeFLetter","string","split","word","charAt","toUpperCase","slice","toLowerCase","join","handleLowerCase","text","TexthtmlForm","setText","useState","Fragment","heading","event","target","rows","handleUpperCase","showAlert","upperCaseText","lowerCaseText","handleCamelCase","camelCaseText","length","About","document","data-bs-parent","Alert","props","alertHeading","alertType","alertText","data-bs-dismiss","aria-hidden","App","setColorArr","setMode","setColor","alert","setAlert","show","setTimeout","console","log","async","_selectedColor$","selectedColor","filter","colorData","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.e320fad0.chunk.js","sourcesContent":["import propTypes from 'prop-types'\r\nimport React from 'react'\r\n\r\n\r\nfunction Navbar(Props) {\r\n  return (\r\n\r\n    <nav className={`navbar navbar-expand-lg bg-body-tertiary bg-${Props.mode}`} data-bs-theme={Props.mode}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{Props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a href=\"/\" className=\"nav-link active\" aria-current=\"page\" >{Props.hometext}</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a href=\"/about\" className=\"nav-link\" >{Props.abouttext}</a>\r\n            </li>\r\n\r\n          </ul>\r\n\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${(Props.mode === 'light' ? 'dark' : 'light')}`}>\r\n            <input className=\"form-check-input me-2\" id=\"flexSwitchCheckDefault\" type=\"checkbox\" onClick={Props.toggleMode} role=\"switch\" />\r\n            <label className=\"form-check-label me-2\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n\r\n          {Props.colorArr.map(color => {\r\n            return (\r\n              <div className=\"form-check\">\r\n                <input className=\"form-check-input radio-inline\" onChange={Props.changeColor} type=\"radio\" name=\"mode\" id={color.id} value={color.id} />\r\n                <label className=\"form-check-label me-3\" htmlFor={color.id}>\r\n                  {color.label}\r\n                </label>\r\n              </div>\r\n            )\r\n          })}\r\n\r\n\r\n        </div>\r\n\r\n      </div>\r\n    </nav>\r\n\r\n\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: propTypes.string.isRequired,\r\n  hometext: propTypes.string.isRequired,\r\n  abouttext: propTypes.string.isRequired,\r\n  toggleMode: propTypes.func,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"My App\",\r\n  hometext: \"Home\",\r\n  abouttext: \"About\"\r\n}\r\nexport default Navbar","\r\nfunction capitlizeFLetter(string) {\r\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');\r\n}\r\n\r\nconst handleLowerCase = (text) => {\r\n    return text.toLowerCase();\r\n    //Props.showAlert('success', 'Converted to LowerCase', 'Text converted to LowerCase');\r\n}\r\n\r\n// module.exports = {\r\n//   capitlizeFLetter: capitlizeFLetter,\r\n//   changeToLowerCase: handleLowerCase\r\n// }\r\n\r\nconst utils = {\r\n  capitlizeFLetter,\r\n  handleLowerCase\r\n}\r\nexport default utils","import React, {useState} from 'react'\r\nimport propTypes from 'prop-types'\r\nimport utils from '../utils/capitlizeFLetter';\r\n\r\nfunction TexthtmlForm(Props) {\r\n    //how to use this as global function - QUESTION HARDIK\r\n    //const capitalizeFLetter = string => string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ')\r\n       \r\n    const handleUpperCase = () => {\r\n        setText(text.toUpperCase());\r\n        Props.showAlert('success', 'Converted to UpperCase', 'Text converted to UpperCase');\r\n    }\r\n\r\n    const handleLowerCase = () => {\r\n        setText(utils.handleLowerCase(text));\r\n        Props.showAlert('success', 'Converted to LowerCase', 'Text converted to LowerCase');\r\n    }\r\n\r\n    const handleCamelCase = () => {\r\n        setText(utils.capitlizeFLetter(text));\r\n        Props.showAlert('success', 'Converted to CamelCase', 'Text converted to CamelCase');\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n    \r\n    const [text, setText] = useState('');\r\n    //const [text1, setText1] = useState('');\r\n    return (\r\n        <>\r\n        <div className='container my-3'>\r\n            <h1>{Props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"myBox\" className=\"form-label\">{Props.heading}</label>\r\n                <textarea value={text} className=\"form-control\" onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            \r\n            <button className='btn btn-primary me-2' onClick={handleUpperCase}>{Props.upperCaseText}</button>\r\n            <button className='btn btn-primary me-2' onClick={handleLowerCase}>{Props.lowerCaseText}</button>\r\n            <button className='btn btn-primary me-2' onClick={handleCamelCase}>{Props.camelCaseText}</button>\r\n        </div>\r\n        <div className='container my-3'>\r\n            <h2 className='mt-3'>Text analytics</h2>\r\n            <h3 className='mt-2'>Preview</h3>\r\n            <p>{text}</p>\r\n            <h3 className='mt-2'>Summary</h3>\r\n            <p>Text contains {text.split(\" \").length} words and {text.length} characters</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nTexthtmlForm.propTypes = {\r\n    heading: propTypes.string.isRequired,\r\n    upperCaseText: propTypes.string.isRequired,\r\n    // lowerCaseText: propTypes.string.isRequired,\r\n    camelCaseText: propTypes.string.isRequired\r\n}\r\nTexthtmlForm.defaultProps = {\r\n    heading: \"Text transformation\",\r\n    upperCaseText: \"Convert to Uppercase\",\r\n    lowerCaseText: \"Convert to Lowercase\",\r\n    camelCaseText: \"Convert to Camelcase\"\r\n}\r\n\r\nexport default TexthtmlForm","import React from 'react'\r\n\r\nfunction About() {\r\n    document.title = \"About Us | Text-Utils\"\r\n    return (\r\n        <>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default About","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  return (\r\n      props.alertHeading && <div className={`alert alert-${props.alertType} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{props.alertHeading}</strong> {props.alertText}\r\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\" />\r\n            <span aria-hidden=\"true\">&times;</span>\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default Alert","import './App.css';\nimport Navbar from './components/Navbar';\nimport TexthtmlForm from './components/TextForm';\nimport About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\nfunction App() {\n  //const [colorArr,setColorArr] = useState(['White', 'Black', 'Green','Orange','Red']);\n\n  const [colorArr, setColorArr] = useState([\n    { id: \"lbl-White\", label: 'White' },\n    { id: \"lbl-Black\", label: 'Black' },\n    { id: \"lbl-Green\", label: 'Green' },\n    { id: \"lbl-Orange\", label: 'Orange' },\n    { id: \"lbl-Red\", label: 'Red' },\n  ]);\n\n  // change navbar mode\n  const [mode, setMode] = useState('light');\n  const toggleMode = () => {\n\n    console.log('mode', mode);\n    if (mode === 'light') {\n      setColorArr('lbl-White','White');\n      setMode('dark');\n      showAlert('success', 'Dark Mode', 'Dark mode enabled');\n    } else {\n      setColorArr('lbl-Orange','Orange');\n      setMode('light');\n      showAlert('success', 'Light Mode', 'Light mode enabled');\n    }\n  }\n\n  // change navbar mode\n  const [color, setColor] = useState([{ id: 'dasdsa' }]);\n  const changeColor = async (event) => {\n    console.log(event.target.value);\n    const selectedColor = await colorArr.filter(colorData => {\n      if (colorData.id === event.target.value) {\n        color.length <= 0 ? setColor(colorData) : setColor([...color, { id: colorData.id }]);\n        return color;\n      }\n    });\n\n    console.log(selectedColor[0]?.id)\n    console.log(color);\n    //setColor('Black');\n    //setColor(event.target.value)\n    // switch (event.target.value) {\n    //   case 'Black':\n    //     setColor('Black');\n    //     break;\n    //   case 'Green':\n    //     setColor('Green');\n    //     break;\n    //   case 'Orange':\n    //     setColor('Orange');\n    //     break;\n    //   case 'Red':\n    //     setColor('Red');\n    //     break;\n    //   default:\n    //     setColor('White');\n    // }\n    //setColor(color);\n\n    //showAlert('success', 'Color Changed', 'Color changed to'+ color);\n  }\n  //alert\n  const [alert, setAlert] = useState({ show: false, type: '', heading: '', text: '' });\n  const showAlert = (type, heading, text) => {\n    setAlert({ show: true, type: type, heading: heading, text: text });\n    setTimeout(() => {\n      setAlert({ show: false, type: '', heading: '', text: '' });\n    }, 2000);\n  }\n\n\n\n  return (\n    <>\n    {alert.show && <Alert alertType={alert.type} alertHeading={alert.heading} alertText={alert.text} />}\n      <div>\n\n        <Navbar\n          title=\"TextUtils\"\n          hometext=\"Home\"\n          abouttext=\"About\"\n          toggleMode={toggleMode}\n          mode={mode}\n          colorArr={colorArr}\n          changeColor={changeColor}\n        />\n      </div>\n      \n        <TexthtmlForm showAlert={showAlert} />\n        <About />\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}